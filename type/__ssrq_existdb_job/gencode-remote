#!/bin/sh -e
#
# 2021 Dennis Camera (dennis.camera at ssrq-sds-fds.ch)
#
# This file is part of cdist.
#
# cdist is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# cdist is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with cdist. If not, see <http://www.gnu.org/licenses/>.
#

join() (IFS=$1; shift; echo "$*")
quote() { printf "'%s'" "$(printf '%s' "$*" | sed -e "s/'/'\\\\''/g")"; }

mkdir "${__object:?}/files"

exist_home=$(cat "${__object:?}/parameter/exist-home")

remote_find_saxon() {
	! ${_found_saxon:-false} || return 0

	cat <<-EOF
	saxon_jar=\$(find $(quote "${exist_home:?}/lib") -name 'Saxon-HE-*.jar' -prune | head -n1)
	test -s "\${saxon_jar}" || {
	    echo 'Cannot find Saxon' >&2
	    exit 1
	}
	EOF
	_found_saxon=true
}

state_should=$(cat "${__object:?}/parameter/state")
state_is=$(sh "${__type:?}/files/job_state.sh")

test "${state_should}" != "${state_is}" || exit 0

case ${state_should}
in
	(present)
		exist_conf=${exist_home:?}/etc/conf.xml

		"${__type:?}/files/gen_job_xml.sh" >"${__object:?}/files/job.xml"

		if cmp -s "${__object:?}/explorer/job.xml" "${__object:?}/files/job.xml"
		then
			# no difference
			exit 0
		fi

		remote_find_saxon
		cat <<-CODE
		java -jar "\${saxon_jar}" -xsl:- -s:$(quote "${exist_conf}") -o:$(quote "${exist_conf}.tmp") <<'EOF' \
		&& cat $(quote "${exist_conf}.tmp") >$(quote "${exist_conf}") || exit
		$(
			# NOTE: Patch the XSLT script to include the job XML instead of
			#       loading it from a file so that the file does not need to
			#       copied to the target first.
			awk -v job_xml="${__object:?}/files/job.xml" '
			/<xsl:param name="job"/ {
				print "<xsl:variable name=\"job\">"
				while (getline l < job_xml) print l
				close(job_xml)
				print "</xsl:variable>"
				next
			}
			{ print }
			' "${__type:?}/files/set-job.xsl"
		)
		EOF
		rm -f $(quote "${exist_conf}.tmp")
		CODE

		echo 'configured job' >>"${__messages_out:?}"
		;;
	(absent)
		exist_conf=${exist_home:?}/etc/conf.xml

		# only need to delete job if it exists
		test -s "${__object:?}/explorer/job.xml" || exit 0

		if test -f "${__object:?}/parameter/name"
		then
			job_name=$(cat "${__object:?}/parameter/name")
		else
			job_name=${__object_id?:}
		fi

		remote_find_saxon
		cat <<-CODE
		java -jar "\${saxon_jar}" -xsl:- -s:$(quote "${exist_conf}") -o:$(quote "${exist_conf}.tmp") name=$(quote "${job_name}") <<'EOF' \
		&& cat $(quote "${exist_conf}.tmp") >$(quote "${exist_conf}") || exit
		$(cat "${__type:?}/files/del-job.xsl")
		EOF
		rm -f $(quote "${exist_conf}.tmp")
		CODE

		echo 'deleted job' >>"${__messages_out:?}"
		;;
	(*)
		printf 'Invalid --state: %s\n' "${state_should}" >&2
		exit 1
		;;
esac
